建造者模式:
	建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。
一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。(将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。)
介绍:
	意图：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。
	主要解决：主要解决在软件系统中，有时候面临着"一个复杂对象"的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。
	何时使用：一些基本部件不会变，而其组合经常变化的时候。
	如何解决：将变与不变分离开。
	关键代码：建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。
	应用实例： 1、去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的"套餐"。 2、JAVA 中的 StringBuilder。
	优点： 1、建造者独立，易扩展。 2、便于控制细节风险。
	缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。
	使用场景： 1、需要生成的对象具有复杂的内部结构(参数很多)。 2、需要生成的对象内部属性本身相互依赖，这些属性的赋值顺序比较重要时（因为在调用ConcreteBuilder的赋值方法时是有先后顺序的）。
	注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序

包含的角色:
	(1)Builder：给出一个抽象接口或抽象类，以规范产品的建造。这个接口规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建，一般由子类具体实现。
	(2)ConcreteBuilder：Builder接口的实现类，并返回组建好对象实例。
	(3)Director：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。
	(4)Product：要创建的复杂对象，产品类