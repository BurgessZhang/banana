抽象工厂模式
    抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。
在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。
介绍
    意图：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。
    主要解决：主要解决接口选择的问题。
    何时使用：系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。
    如何解决：在一个产品族里面，定义多个产品。
    关键代码：在一个工厂里聚合多个同类产品。
    应用实例：工作了，为了参加一些聚会，肯定有两套或多套衣服吧，比如说有商务装（成套，一系列具体产品）、时尚装（成套，一系列具体产品），甚至对于一个家庭来说，可能有商务女装、商务男装、时尚女装、时尚男装，这些也都是成套的，即一系列具体产品。假设一种情况（现实中是不存在的，要不然，没法进入共产主义了，但有利于说明抽象工厂模式），在您的家中，某一个衣柜（具体工厂）只能存放某一种这样的衣服（成套，一系列具体产品），每次拿这种成套的衣服时也自然要从这个衣柜中取出了。用 OO 的思想去理解，所有的衣柜（具体工厂）都是衣柜类的（抽象工厂）某一个，而每一件成套的衣服又包括具体的上衣（某一具体产品），裤子（某一具体产品），这些具体的上衣其实也都是上衣（抽象产品），具体的裤子也都是裤子（另一个抽象产品）。
    优点：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。
    缺点：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。
    使用场景： 1、QQ 换皮肤，一整套一起换。 2、生成不同操作系统的程序。
    注意事项：产品族难扩展，产品等级易扩展。

1.抽象工厂模式模式介绍

抽象工厂模式定义：
    为创建一组相关或者是相互依赖的对象提供的一个接口，而不需要指定它们的具体类。
这个定义很抽象，不急，可以看完实例再返回来看一遍。

抽象工厂模式包括的角色：
（1）抽象产品类：为各种产品声明抽象接口或抽象类。
（2）具体产品类：抽象产品类的实现类，为实现某个具体产品的对象。
（3）抽象工厂类：声明了一组（注意是一组，看了下面的例子就会明白和工厂方法模式的区别）用于创建一种产品（每一个方法对应一种产品）的方法。
（4）具体工厂类：继承抽象工厂类，生成一组具体产品（注意是一组，这很重要）。

2. 抽象工厂模式的实现
    下面是利用工厂方法模式“生产两款车子”的实例介绍，便于理解该模式如何运用。
    在本例中，有两款车内空调品牌，分别为海尔和格力。也有两种发动机品牌，分别为国产和进口。
    （这就是一开始所说的，抽象工厂模式有多个产品抽象类，分别为空调抽象类和发动机抽象类）
    然后在本例中，对于A类车，搭载的是海尔空调和进口发动机。对于B类车，搭载的是格力空调和国产发动机。

    1.空调类
    public interface Air_conditioner {
        void work();
    }

        //具体产品Air_conditioner_Haier，Air_conditioner_Gree
        public class Air_conditioner_Haier implements Air_conditioner {
        @override
        　public void work() {
        　　System.out.println(" Air_conditioner_Haier is working ...");
        　}
        }
        public class Air_conditioner_Gree implements Air_conditioner {
        @override
        　public void work() {
        　　System.out.println(" Air_conditioner_Gree is working ...");
        　}
    }
    2.发动机类
    public interface Engine {
        void work();
    }
        //具体产品Engine_Import，Engine_Domestic
        public class Engine_Import implements Engine {
        @override
        　public void work() {
        　　System.out.println(" Engine_Import is working...");
        　}
        }
        public class Engine_Domestic implements Engine {
        @override
        　public void work() {
        　　System.out.println(" Engine_Domestic is working. ...");
        　}
    }
    3.抽象工厂与接口实现
    public interface Abstract_CarFactory {
    　public install_air_conditioner();
    　public install_engine();
    }
    //具体工厂A类
    public class CarA implements AbstractFactory {
    　public install_air_conditioner () {
    　　return new Air_conditioner_Haier();
    　}
    　public install_engine () {
    　　return new Engine_Import();
    　}
    }
    //具体工厂B类
    public class CarB implements AbstractFactory {
    　public install_air_conditioner () {
    　　return new Air_conditioner_Gree();
    　}
    　public install_engine () {
    　　return new Engine_Domestic();
    　}
    }
    4.使用
    Abstract_CarFactory factoryA = new CarA();
    factoryA. install_air_conditioner.work();
    factoryA. install_engine().work();

    Abstract_CarFactory factoryB = new CarB();
    factoryB. install_air_conditioner.work();
    factoryB. install_engine().work();

3.  抽象工厂模式的优缺点

抽象工厂模式的优点：
（1）具有工厂方法模式解耦的优点。
（2）工厂模式针对的是一个产品等级结构，抽象工厂模式针对的是面向多个产品等级结构的。

最主要的是可以在类内部对产品族的关联关系进行定义和描述。

【重要拓展概念】
产品族的概念：所谓的产品族，是指位于不同产品等级结构中功能相关联的产品组成的家族。
举例说明，EngineA和EngineB即为两个不同的等级结构，他们都衍生于Engine类。但是这里有海尔、格力两种空调，并且这两种空调都搭载到两种车子内（从这两个维度看，是有四种类型的车子了）。
那么搭载海尔空调的AB两款车子就属于同一个产品族，搭载格力空调的AB两款车子就属于另一个产品族。

抽象工厂模式的缺点：
（1）产品族的扩展将是一件十分费力的事情，假如产品族中需要增加一个新的产品，则几乎所有的工厂类都需要进行修改。
（2）在具体工厂类的方法中，对于产品族里的产品，只能使用其中一个。这也比较容易理解，比如，一款车子不可以搭载两种空调。